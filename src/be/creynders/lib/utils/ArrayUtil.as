/*** ...* @author Default* @version 0.1*/package be.creynders.lib.utils {	import be.creynders.lib.utils.MathUtil;		public class ArrayUtil {				static public function shuffle( arr : Array ) : Array{			var temp : Array = clone( arr );			var output : Array = new Array();			while ( temp.length > 0 ){				var randomIndex : uint = MathUtil.randomUint( temp.length );				output.push( temp[ randomIndex ] );				temp.splice( randomIndex, 1 )			}			return output;		}				static public function indexByKey( haystack : Array, key : String, value : * ) : int {			var n : int = haystack.length;			for ( var i : int = 0 ; i < n ; i++ ) {				var item : Object = haystack[ i ];				if ( item.hasOwnProperty( key ) && ( item[ key ] == value ) ) return i;			}			return -1;		}				static public function valueByKey( haystack : Array, key : String, value : * ) : * {			var index : int = indexByKey( haystack, key, value );			if ( index >= 0 ) return haystack[ index ];						return null;		}				static public function clone( source : Array ) : Array {			var f : Function = function( item : Object, ...rest ) : Object {				return item;			}						return source.map( f );		}				static public function randomValue( source : Array ) : * {						if ( source && source.length > 0) {				var index : int = MathUtil.randomFromRange( 0, source.length - 1, true );				//trace( index );				return source[ index ];			}						return null;		}		}	}